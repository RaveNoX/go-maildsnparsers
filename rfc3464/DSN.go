package rfc3464

import (
	"net/textproto"
	"strings"
)

/*
DSN is RFC3464 Delivery Status Notifications (DSN)

	Some fields of a DSN apply to all of the delivery attempts described
	by that DSN.  At most, these fields may appear once in any DSN.
	These fields are used to correlate the DSN with the original message
	transaction and to provide additional information which may be useful
	to gateways.

	per-message-fields =
		[ original-envelope-id-field CRLF ]
		reporting-mta-field CRLF
		[ dsn-gateway-field CRLF ]
		[ received-from-mta-field CRLF ]
		[ arrival-date-field CRLF ]
		*( extension-field CRLF )
*/
type DSN struct {
	/*
		2.2.1 The Original-Envelope-Id field

		The optional Original-Envelope-Id field contains an "envelope
		identifier" that uniquely identifies the transaction during which the
		message was submitted, and was either (a) specified by the sender and
		supplied to the sender's MTA, or (b) generated by the sender's MTA
		and made available to the sender when the message was submitted.  Its
		purpose is to allow the sender (or her user agent) to associate the
		returned DSN with the specific transaction in which the message was
		sent.

		If such an envelope identifier was present in the envelope that
		accompanied the message when it arrived at the Reporting MTA, it
		SHOULD be supplied in the Original-Envelope-Id field of any DSNs
		issued as a result of an attempt to deliver the message.  Except when
		a DSN is issued by the sender's MTA, an MTA MUST NOT supply this
		field unless there is an envelope-identifier field in the envelope
		that accompanied this message on its arrival at the Reporting MTA.

		The Original-Envelope-Id field is defined as follows:

				original-envelope-id-field =
						"Original-Envelope-Id" ":" envelope-id

				envelope-id = *text

		There may be at most one Original-Envelope-Id field per DSN.

		The envelope-id is CASE-SENSITIVE.  The DSN MUST preserve the
		original case and spelling of the envelope-id.

		NOTE: The Original-Envelope-Id is NOT the same as the
		Message-Id from the message header.  The Message-Id identifies
		the content of the message, while the Original-Envelope-Id
		identifies the transaction in which the message is sent.
	*/
	OriginalEnvelopeID string

	/*
		2.2.2 The Reporting-MTA DSN field

		reporting-mta-field =
					"Reporting-MTA" ":" mta-name-type ";" mta-name

				mta-name = *text

		The Reporting-MTA field is defined as follows:

		A DSN describes the results of attempts to deliver, relay, or gateway
		a message to one or more recipients.  In all cases, the Reporting-MTA
		is the MTA that attempted to perform the delivery, relay, or gateway
		operation described in the DSN.  This field is required.

		Note that if an SMTP client attempts to relay a message to an SMTP
		server and receives an error reply to a RCPT command, the client is
		responsible for generating the DSN, and the client's domain name will
		appear in the Reporting-MTA field.  (The server's domain name will
		appear in the Remote-MTA field.)

		Note that the Reporting-MTA is not necessarily the MTA which actually
		issued the DSN.  For example, if an attempt to deliver a message
		outside of the Internet resulted in a non-delivery notification which
		was gatewayed back into Internet mail, the Reporting-MTA field of the
		resulting DSN would be that of the MTA that originally reported the
		delivery failure, not that of the gateway which converted the foreign
		notification into a DSN.  See Figure 2.

		sender's environment                            recipient's environment
		 ............................ ..........................................
		                            : :
		                        (1) : :                             (2)
		   +-----+  +--------+  +--------+  +---------+  +---------+   +------+
		   |     |  |        |  |        |  |Received-|  |         |   |      |
		   |     |=>|Original|=>|        |->|  From   |->|Reporting|-->|Remote|
		   | user|  |   MTA  |  |        |  |   MTA   |  |   MTA   |<No|  MTA |
		   |agent|  +--------+  |Gateway |  +---------+  +----v----+   +------+
		   |     |              |        |                    |
		   |     | <============|        |<-------------------+
		   +-----+              |        |(4)                (3)
		                        +--------+
		                            : :
		 ...........................: :.........................................

		              Figure 2. DSNs in the presence of gateways

		(1) message is gatewayed into recipient's environment
		(2) attempt to relay message fails
		(3) reporting-mta (in recipient's environment) returns non-delivery
			notification
		(4) gateway translates foreign notification into a DSN

		The mta-name portion of the Reporting-MTA field is formatted
		according to the conventions indicated by the mta-name-type
		sub-field.  If an MTA functions as a gateway between dissimilar mail
		environments and thus is known by multiple names depending on the
		environment, the mta-name sub-field SHOULD contain the name used by
		the environment from which the message was accepted by the
		Reporting-MTA.

		Because the exact spelling of an MTA name may be significant in a
		particular environment, MTA names are CASE-SENSITIVE.
	*/
	ReportingMTA TypeValueField

	/*

		2.2.3 The DSN-Gateway field

		The DSN-Gateway field indicates the name of the gateway or MTA that
		translated a foreign (non-Internet) delivery status notification into
		this DSN.  This field MUST appear in any DSN that was translated by a
		gateway from a foreign system into DSN format, and MUST NOT appear
		otherwise.

			dsn-gateway-field = "DSN-Gateway" ":" mta-name-type ";" mta-name

		For gateways into Internet mail, the MTA-name-type will normally be
		"dns", and the mta-name will be the Internet domain name of the
		gateway.
	*/
	DsnGateway TypeValueField

	/*
		2.2.4 The Received-From-MTA DSN field

		The optional Received-From-MTA field indicates the name of the MTA
		from which the message was received.

			received-from-mta-field =
					"Received-From-MTA" ":" mta-name-type ";" mta-name

		If the message was received from an Internet host via SMTP, the
		contents of the mta-name sub-field SHOULD be the Internet domain name
		supplied in the HELO or EHLO command, and the network address used by
		the SMTP client SHOULD be included as a comment enclosed in
		parentheses.  (In this case, the MTA-name-type will be "dns".)

		The mta-name portion of the Received-From-MTA field is formatted
		according to the conventions indicated by the MTA-name-type sub-
		field.

		Since case is significant in some mail systems, the exact spelling,
		including case, of the MTA name SHOULD be preserved.
	*/
	ReceivedFromMTA TypeValueField

	/*
		2.2.5 The Arrival-Date DSN field

		The optional Arrival-Date field indicates the date and time at which
		the message arrived at the Reporting MTA.  If the Last-Attempt-Date
		field is also provided in a per-recipient field, this can be used to
		determine the interval between when the message arrived at the
		Reporting MTA and when the report was issued for that recipient.

			arrival-date-field = "Arrival-Date" ":" date-time

		The date and time are expressed in RFC 822 'date-time' format, as
		modified by RFC1123.  Numeric timezones ([+/-]HHMM format) MUST be
		used.
	*/
	ArrivalDate string

	/*
		2.3 Per-Recipient DSN fields

		A DSN contains information about attempts to deliver a message to one
		or more recipients.  The delivery information for any particular
		recipient is contained in a group of contiguous per-recipient fields.
		Each group of per-recipient fields is preceded by a blank line.

		The syntax for the group of per-recipient fields is as follows:

		per-recipient-fields =
				[ original-recipient-field CRLF ]
				final-recipient-field CRLF
				action-field CRLF
				status-field CRLF
				[ remote-mta-field CRLF ]
				[ diagnostic-code-field CRLF ]
				[ last-attempt-date-field CRLF ]
				[ final-log-id-field CRLF ]
				[ will-retry-until-field CRLF ]
				*( extension-field CRLF )
	*/
	Recipients []RecipientRecord

	/*
		2.4 Extension fields


		Additional per-message or per-recipient DSN fields may be defined in
		the future by later revisions or extensions to this specification.
		Extension-field names beginning with "X-" will never be defined as
		standard fields;  such names are reserved for experimental use.  DSN
		field names NOT beginning with "X-" MUST be registered with the
		Internet Assigned Numbers Authority (IANA) and published in an RFC.

		Extension DSN fields may be defined for the following reasons:

		(a) To allow additional information from foreign delivery status
		reports to be tunneled through Internet DSNs.  The names of such
		DSN fields should begin with an indication of the foreign
		environment name (e.g., X400-Physical-Forwarding-Address).

		(b) To allow the transmission of diagnostic information which is
		specific to a particular mail transport protocol.  The names of
		such DSN fields should begin with an indication of the mail
		transport being used (e.g., SMTP-Remote-Recipient-Address).  Such
		fields should be used for diagnostic purposes only and not by
		user agents or mail gateways.

		(c) To allow transmission of diagnostic information which is specific
		to a particular message transfer agent (MTA).  The names of such
		DSN fields should begin with an indication of the MTA
		implementation that produced the DSN. (e.g., Foomail-Queue-ID).

		MTA implementers are encouraged to provide adequate information, via
		extension fields if necessary, to allow an MTA maintainer to
		understand the nature of correctable delivery failures and how to fix
		them.  For example, if message delivery attempts are logged, the DSN
		might include information that allows the MTA maintainer to easily
		find the log entry for a failed delivery attempt.

		If an MTA developer does not wish to register the meanings of such
		extension fields, "X-" fields may be used for this purpose.  To avoid
		name collisions, the name of the MTA implementation should follow the
		"X-", (e.g., "X-Foomail-Log-ID").
	*/
	Extensions Extensions
}

func (dsn *DSN) fillFromHeader(hdr textproto.MIMEHeader) {
	dsn.Extensions = make(Extensions)

	var (
		keyOriginalEnvelopeID = textproto.CanonicalMIMEHeaderKey("Original-Envelope-Id")
		keyReportingMTA       = textproto.CanonicalMIMEHeaderKey("Reporting-MTA")
		keyDsnGateway         = textproto.CanonicalMIMEHeaderKey("DSN-Gateway")
		keyReceivedFromMTA    = textproto.CanonicalMIMEHeaderKey("Received-From-MTA")
		keyArrivalDate        = textproto.CanonicalMIMEHeaderKey("Arrival-Date")
	)

	for k, v := range hdr {
		val := strings.Join(v, "\n")

		switch k {
		case keyOriginalEnvelopeID:
			dsn.OriginalEnvelopeID = val
		case keyReportingMTA:
			dsn.ReportingMTA = ParseTypeValueField(val)
		case keyDsnGateway:
			dsn.DsnGateway = ParseTypeValueField(val)
		case keyReceivedFromMTA:
			dsn.ReceivedFromMTA = ParseTypeValueField(val)
		case keyArrivalDate:
			dsn.ArrivalDate = val
		default:
			dsn.Extensions.Set(k, val)
		}
	}
}
